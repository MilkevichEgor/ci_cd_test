# This workflow will install a prebuilt Ruby version, install dependencies, and
# run tests and linters. Then it pulls new features from my repo and
# rebuild containers on remote server through ssh.

name: "Node CI"
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  
#   test:
#     runs-on: ubuntu-latest
#     services:
#       postgres:
#         image: postgres:latest
#         ports:
#           - "5433:5432"
#         env:
#           POSTGRES_DB: rails_test
#           POSTGRES_USER: rails
#           POSTGRES_PASSWORD: password
#     env:
#       POSTGRES_DB: rails_test
#       POSTGRES_USER: rails
#       POSTGRES_PASSWORD: password
#       RAILS_ENV: test
          
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          bundler-cache: true
      - name: Run command on remote server
        uses: D3rHase/ssh-command-action@v0.2.2
        with:
          host: ${{secrets.SSH_HOST}}
          user: ${{secrets.SSH_USER}}
          private_key: ${{secrets.SSH_PRIVATE_KEY}}
          host_fingerprint: ${{secrets.HOST_FINGERPRINT}}
          command: |
            cd ${{ secrets.PROJECT_FOLDER }};
            git checkout main;
            git pull;
            docker-compose --file docker compose.prod.ym down;
            docker-compose --file docker compose.prod.yml up -d;
            docker system prune --all --force;
